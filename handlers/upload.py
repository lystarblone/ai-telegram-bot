from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from handlers.states import UploadStates
from google_drive import GoogleDriveService
from text_processor import TextProcessor
from database import Database
from config import config
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("upload"))
async def cmd_upload(message: Message, state: FSMContext):
    user_id = message.from_user.id
    db = Database()
    
    try:
        if db.get_google_token(user_id):
            await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª—ã...")
            await process_files(message)
        else:
            await message.answer(
                "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google Drive.\n"
                "–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —Å–∫–æ–ø–∏—Ä—É–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ:"
            )
            drive_service = GoogleDriveService()
            auth_url = drive_service.get_auth_url()
            await message.answer(auth_url)
            await state.set_state(UploadStates.waiting_auth_code)
            await state.update_data(user_id=user_id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è user_id {user_id}: {str(e)}")

@router.message(UploadStates.waiting_auth_code)
async def process_auth_code(message: Message, state: FSMContext):
    user_id = (await state.get_data()).get("user_id")
    code = message.text.strip()
    drive_service = GoogleDriveService()
    db = Database()
    
    try:
        token = drive_service.authenticate(code)
        db.save_google_token(user_id, token)
        await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª—ã...")
        await process_files(message)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é /upload.")
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è user_id {user_id}: {str(e)}")
    finally:
        await state.clear()

async def process_files(message: Message):
    user_id = message.from_user.id
    drive_service = GoogleDriveService()
    db = Database()
    processor = TextProcessor()
    
    try:
        drive_service.load_credentials(db.get_google_token(user_id))
        files = drive_service.list_files()
        if not files:
            await message.answer("üìÇ –ù–∞ Google Drive –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
            logger.info(f"–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –Ω–∞ Google Drive –¥–ª—è user_id {user_id}")
            return
        
        processed_count = 0
        for file in files:
            if file["mimeType"] in config.SUPPORTED_MIME_TYPES:
                try:
                    content = drive_service.download_file(file["id"], file["mimeType"])
                    text = processor.extract_text(content, file["mimeType"])
                    if text.strip():
                        db.save_document(user_id, file["name"], text)
                        processed_count += 1
                        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª {file['name']} –¥–ª—è user_id {user_id}")
                    else:
                        logger.warning(f"–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–µ {file['name']} –¥–ª—è user_id {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file['name']}: {str(e)}")
        
        if processed_count == 0:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ (PDF –∏–ª–∏ TXT).")
        else:
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {processed_count} —Ñ–∞–π–ª–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π /ask, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {processed_count} —Ñ–∞–π–ª–æ–≤ –¥–ª—è user_id {user_id}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è user_id {user_id}: {str(e)}")