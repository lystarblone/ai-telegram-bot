from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from handlers.states import AskStates
from database import Database
from huggingface_hub import InferenceClient
from config import config
import logging

router = Router()
logger = logging.getLogger(__name__)

client = InferenceClient(
    api_key=config.AI_API_KEY,
    model="mistralai/Mixtral-8x7B-Instruct-v0.1"
)

async def query_ai(prompt: str, max_tokens: int = 500) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ AI –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
    try:
        response = client.chat_completion(
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –≤–µ–∑–¥–µ –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —á–µ—Ç–∫–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É–∫–∞–∂–∏ —ç—Ç–æ –∏ –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫ –∏–ª–∏ —ç—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç"},
                {"role": "user", "content": prompt}
            ],
            max_tokens=max_tokens,
            temperature=0.1,
            top_p=0.9
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ AI: {str(e)}")
        raise

@router.message(Command("ask"))
async def cmd_ask(message: Message, state: FSMContext):
    user_id = message.from_user.id
    db = Database()
    documents = db.get_documents(user_id)
    
    if not documents:
        await message.answer("üìÇ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å Google Drive.")
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, user_id: {user_id}")
        return
    
    await state.set_state(AskStates.waiting_question)
    await message.answer("‚ùì –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–∞—á–∞–ª –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å")

@router.message(AskStates.waiting_question)
async def process_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    question = message.text.strip()
    
    if len(question) < 5:
        await message.answer("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å.")
        logger.warning(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç user_id {user_id}: {question}")
        return
    
    db = Database()
    documents = db.get_documents(user_id)
    
    if not documents:
        await message.answer("üìÇ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.")
        await state.clear()
        logger.info(f"–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è user_id {user_id} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    context = "\n".join(doc.content for doc in documents)
    if len(context) > 5000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = context[:5000]
        logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è user_id {user_id}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = (
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n"
        f"–í–æ–ø—Ä–æ—Å: {question}\n\n"
        "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∞—Ä–±—É–∑–æ–≤ –Ω–µ—Ç, —É–∫–∞–∂–∏ —ç—Ç–æ –∏ –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ —Ä–µ–≥–∏–æ–Ω–µ –∏–ª–∏ —Ç–∏–ø–µ —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–µ—Ä–º–µ—Ä, –ø—Ä–æ–¥–∞–≤–µ—Ü –≤ –º–∞–≥–∞–∑–∏–Ω–µ)."
    )
    
    try:
        response = await query_ai(prompt)
        if "—É—Ç–æ—á–Ω–∏" in response.lower() or "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in response.lower():
            await state.set_state(AskStates.waiting_clarification)
            await state.update_data(context=context, last_question=question)
            await message.answer(f"ü§î {response}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–≥–∏–æ–Ω –∏–ª–∏ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞):")
            logger.info(f"AI –∑–∞–ø—Ä–æ—Å–∏–ª —É—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç user_id {user_id}")
        else:
            await message.answer(
                f"{response}\n\n"
                "–ó–∞–¥–∞–π –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å (/ask) –∏–ª–∏ —Å–±—Ä–æ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (/reset)."
            )
            await state.update_data(context=context, last_question=question)
            logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç user_id {user_id}: {response[:100]}...")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
        await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è user_id {user_id}: {str(e)}")

@router.message(AskStates.waiting_clarification)
async def process_clarification(message: Message, state: FSMContext):
    user_id = message.from_user.id
    clarification = message.text.strip()
    data = await state.get_data()
    context = data.get("context")
    last_question = data.get("last_question")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º
    prompt = (
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n"
        f"–ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {last_question}\n"
        f"–£—Ç–æ—á–Ω–µ–Ω–∏–µ: {clarification}\n\n"
        "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É–∫–∞–∂–∏ —ç—Ç–æ."
    )
    
    try:
        response = await query_ai(prompt)
        await message.answer(
            f"üìù –û—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n{response}\n\n"
            "–ó–∞–¥–∞–π –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å (/ask) –∏–ª–∏ —Å–±—Ä–æ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (/reset)."
        )
        await state.update_data(context=context, last_question=clarification)
        logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç user_id {user_id}: {response[:100]}...")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è: {str(e)}")
        await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–ª—è user_id {user_id}: {str(e)}")

@router.message(Command("reset"))
async def cmd_reset(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω. –ó–∞–¥–∞–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é /ask.")
    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è user_id {message.from_user.id}")