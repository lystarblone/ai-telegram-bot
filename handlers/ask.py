from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from handlers.states import AskStates
from database import Database
from huggingface_hub import InferenceClient
from config import config
import logging

router = Router()
logger = logging.getLogger(__name__)

client = InferenceClient(
    api_key=config.AI_API_KEY,
    model="mistralai/Mixtral-8x7B-Instruct-v0.1"
)

async def query_ai(prompt: str, max_tokens: int = 500) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ AI –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
    try:
        response = client.chat_completion(
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –∏–∏ –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —á–µ—Ç–∫–æ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, —É–∫–∞–∂–∏, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=max_tokens,
            temperature=0.2,
            top_p=0.9
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ AI: {str(e)}")
        raise

@router.message(Command("ask"))
async def cmd_ask(message: Message, state: FSMContext):
    user_id = message.from_user.id
    db = Database()
    documents = db.get_documents(user_id)
    
    await state.clear()
    if not documents:
        await message.answer("üìÇ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ /chat –¥–ª—è –æ–±—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, user_id: {user_id}")
        return
    
    await state.set_state(AskStates.waiting_question)
    await message.answer("‚ùì –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–∞—á–∞–ª –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å")

@router.message(AskStates.waiting_question, ~Command(commands=["start", "help", "upload", "ask", "chat", "reset"]))
async def process_question(message: Message, state: FSMContext):
    user_id = message.from_user.id
    question = message.text.strip()
    
    if len(question) < 5:
        await message.answer("‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")
        logger.warning(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç user_id {user_id}: {question}")
        return
    
    db = Database()
    documents = db.get_documents(user_id)
    
    if not documents:
        await message.answer("üìÇ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π /upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ /chat –¥–ª—è –æ–±—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
        await state.clear()
        logger.info(f"–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è user_id {user_id} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞")
        return
    
    context = "\n".join(doc.content for doc in documents)
    if len(context) > 5000:
        context = context[:5000]
        logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è user_id {user_id}")
    
    prompt = (
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n"
        f"–í–æ–ø—Ä–æ—Å: {question}\n\n"
        "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.'"
    )
    
    try:
        response = await query_ai(prompt)
        if "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" in response.lower():
            response += "\n–•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ –≤ –æ–±—â–µ–º –¥–∏–∞–ª–æ–≥–µ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat."
        await message.answer(
            f"{response}\n\n"
            "–ó–∞–¥–∞–π –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å (/ask) –∏–ª–∏ —Å–±—Ä–æ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (/reset)."
        )
        await state.update_data(context=context, last_question=question)
        logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç user_id {user_id}: {response[:100]}...")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
        await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è user_id {user_id}: {str(e)}")

@router.message(Command("reset"))
async def cmd_reset(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω. –ó–∞–¥–∞–π –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é /ask –∏–ª–∏ –Ω–∞—á–Ω–∏ –æ–±—â–∏–π –¥–∏–∞–ª–æ–≥ —Å /chat.")
    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è user_id {message.from_user.id}")