from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from handlers.states import ChatStates
from huggingface_hub import InferenceClient
from config import config
import logging

router = Router()
logger = logging.getLogger(__name__)

client = InferenceClient(
    api_key=config.AI_API_KEY,
    model="mistralai/Mixtral-8x7B-Instruct-v0.1"
)

async def query_ai(message: str, conversation_history: list = None, max_tokens: int = 500) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ AI –¥–ª—è –æ–±—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
    try:
        messages = [
            {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ø–æ —Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç."}
        ]
        if conversation_history:
            messages.extend(conversation_history)
        messages.append({"role": "user", "content": message})
        
        response = client.chat_completion(
            messages=messages,
            max_tokens=max_tokens,
            temperature=0.4,
            top_p=0.9
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ AI: {str(e)}")
        raise

@router.message(Command("chat"))
async def cmd_chat(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(ChatStates.waiting_message)
    await message.answer("üí¨ –¢—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞! –ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {message.from_user.id} –Ω–∞—á–∞–ª –æ–±—â–∏–π –¥–∏–∞–ª–æ–≥")

@router.message(ChatStates.waiting_message, ~Command(commands=["start", "help", "upload", "ask", "chat", "reset"]))
async def process_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    
    if len(text) < 3:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.")
        logger.warning(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id {user_id}: {text}")
        return
    
    data = await state.get_data()
    conversation_history = data.get("conversation_history", [])
    
    try:
        response = await query_ai(text, conversation_history)
        conversation_history.append({"role": "user", "content": text})
        conversation_history.append({"role": "assistant", "content": response})
        if len(conversation_history) > 20:
            conversation_history = conversation_history[-20:]
        await state.update_data(conversation_history=conversation_history)
        
        await message.answer(
            f"{response}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ —Å–±—Ä–æ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (/reset)."
        )
        logger.info(f"–û—Ç–≤–µ—Ç –≤ –æ–±—â–µ–º –¥–∏–∞–ª–æ–≥–µ –¥–ª—è user_id {user_id}: {response[:100]}...")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await state.clear()
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id {user_id}: {str(e)}")

@router.message(Command("reset"))
async def cmd_reset(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /chat –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º —Å /ask.")
    logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–ª—è user_id {message.from_user.id}")